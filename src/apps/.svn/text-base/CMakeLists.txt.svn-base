cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
include(../libks/common.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

# Octomap stuff
find_package(octomap REQUIRED)
include_directories(${OCTOMAP_INCLUDE_DIRS})
link_directories(${OCTOMAP_LIBRARY_DIRS})

ks_common_dependencies()
rosbuild_add_boost_directories()

rosbuild_add_executable(stereo stereo.cpp)
rosbuild_link_boost(stereo system filesystem thread)
target_link_libraries(stereo ${SDL_LIBRARY})
ks_create_link(stereo ${CMAKE_CURRENT_BINARY_DIR}/bin/stereo ../bin/stereo)

rosbuild_add_executable(feature feature.cpp)
rosbuild_link_boost(feature system filesystem thread)
target_link_libraries(feature ${SDL_LIBRARY} cvd)
ks_create_link(feature ${CMAKE_CURRENT_BINARY_DIR}/bin/feature ../bin/feature)

rosbuild_add_executable(censusfeature censusfeature.cpp)
rosbuild_link_boost(censusfeature system filesystem thread)
target_link_libraries(censusfeature ${SDL_LIBRARY})
ks_create_link(censusfeature ${CMAKE_CURRENT_BINARY_DIR}/bin/censusfeature ../bin/censusfeature)

rosbuild_add_executable(calibrate calibrate.cpp)
rosbuild_link_boost(calibrate system filesystem thread)
target_link_libraries(calibrate ${SDL_LIBRARY})
ks_create_link(calibrate ${CMAKE_CURRENT_BINARY_DIR}/bin/calibrate ../bin/calibrate)

rosbuild_add_executable(rectify rectify.cpp)
rosbuild_link_boost(rectify system filesystem thread)
target_link_libraries(rectify ${SDL_LIBRARY})
ks_create_link(rectify ${CMAKE_CURRENT_BINARY_DIR}/bin/rectify ../bin/rectify)

rosbuild_add_executable(rawconv rawconv.cpp)
rosbuild_link_boost(rawconv system filesystem thread)
ks_create_link(rawconv ${CMAKE_CURRENT_BINARY_DIR}/bin/rawconv ../bin/rawconv)

rosbuild_add_executable(evalfeature evalfeature.cpp)
rosbuild_link_boost(evalfeature system filesystem thread)
target_link_libraries(evalfeature ${SDL_LIBRARY})
ks_create_link(evalfeature ${CMAKE_CURRENT_BINARY_DIR}/bin/evalfeature ../bin/evalfeature)

rosbuild_add_executable(evalstereo evalstereo.cpp)
rosbuild_link_boost(evalstereo system filesystem thread)
target_link_libraries(evalstereo ${SDL_LIBRARY})
ks_create_link(evalstereo ${CMAKE_CURRENT_BINARY_DIR}/bin/evalstereo ../bin/evalstereo)

rosbuild_add_executable(convertcapture convertcapture.cpp)
rosbuild_link_boost(convertcapture system filesystem thread)
ks_create_link(convertcapture ${CMAKE_CURRENT_BINARY_DIR}/bin/convertcapture ../bin/convertcapture)

rosbuild_add_executable(pointstf pointstf.cpp)
rosbuild_link_boost(pointstf system filesystem thread)
ks_create_link(pointstf ${CMAKE_CURRENT_BINARY_DIR}/bin/pointstf ../bin/pointstf)

rosbuild_add_executable(evaloctomap evaloctomap.cpp)
rosbuild_link_boost(evaloctomap system filesystem thread)
target_link_libraries(evaloctomap ${OCTOMAP_LIBRARIES})
ks_create_link(evaloctomap ${CMAKE_CURRENT_BINARY_DIR}/bin/evaloctomap ../bin/evaloctomap)

add_custom_target(conv_rawseeds ALL)
ks_create_link(conv_rawseeds ${PROJECT_SOURCE_DIR}/conv_rawseeds.py ../bin/conv_rawseeds.py)

add_custom_target(conv_kitti ALL)
ks_create_link(conv_kitti ${PROJECT_SOURCE_DIR}/conv_kitti.py ../bin/conv_kitti.py)

add_custom_target(conv_newcollege ALL)
ks_create_link(conv_newcollege ${PROJECT_SOURCE_DIR}/conv_newcollege.py ../bin/conv_newcollege.py)
