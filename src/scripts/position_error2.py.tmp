#!/usr/bin/python
import sys
import math
import random

initTf = [
	0, #dt
	0, #dx
	0, #dy
	0, #dz
	0,#math.pi, #dr	
]

startStepWidth = 0.01
minDelta = 1e-5
maxDelta = 1e+5
minErrChange = 1e-5

acc=1.2
dec=0.5

## Function Definitions

def optimize(tf, idx, data1, data2, evalDT):
	# Get base line
	transformed2 = []
	transform(data2, transformed2, tf)
	prevErr = calcDiffs(data1, transformed2, False, evalDT)

	# Go positive direction
	inc = startStepWidth
	
	while True:
		tf[idx] += inc
		
		transformed2 = []
		transform(data2, transformed2, tf)
		currErr = calcDiffs(data1, transformed2, False, evalDT)
		
		if currErr[0] > prevErr[0]:
			inc = -inc*dec
			if inc*inc < minDelta*minDelta:
				break
		else:
			inc*=acc
			if inc*inc > maxDelta*maxDelta:
				break

		prevErr = currErr	
	
	return currErr

def transform(input, output, tf):
	dt = tf[0]
	dx = tf[1]
	dy = tf[2]
	dz = tf[3]
	dr = tf[4]
	
	del output[:]
	
	for i in range(0, len(input)):
		output.append([
			input[i][0] - dt,
			math.cos(dr) * input[i][1] - math.sin(dr) * input[i][2] - dx,
			math.sin(dr) * input[i][1] + math.cos(dr) * input[i][2] - dy,
			input[i][3] - dz
		])
	
def calcDiffs(data1, data2, calcAvg, evalDT):
	rmse = 0
	avg = 0
	j = 0
	count = 0
	
	startTime = 
	
	for i in range(0, len(data2)):
		while j < len(data1) and data1[j][0] < data2[i][0]:
			j+=1
		
		if j == len(data1):
			break
		if j == 0:
			continue
		
		dt1 = data2[i][0] - data1[j-1][0]
		dt2 = data1[j][0] - data1[j-1][0]
		
		# Interpolate
		x = data1[j-1][1] + dt1*(data1[j][1] - data1[j-1][1])/dt2
		y = data1[j-1][2] + dt1*(data1[j][2] - data1[j-1][2])/dt2
		z = data1[j-1][3] + dt1*(data1[j][3] - data1[j-1][3])/dt2
		
		dx = data2[i][1] - x
		dy = data2[i][2] - y
		dz = data2[i][3] - z
		
		sqrError = dx*dx + dy*dy + dz*dz
		if calcAvg:
			avg += sqrError ** 0.5
		rmse += sqrError
		count += 1
	
	if count > len(data2)/2: # We want at least half the points being matched
		return [
			(rmse / count) ** (0.5),
			avg / count
		]
	else: return [float('Inf'), float('Inf')]

## Main

if len(sys.argv) < 4 || len(sys.args) > 5:
	print "Usage: ", sys.argv[0], "input-file1 input-file2 output-file [eval-time]";
	sys.exit(1)

file1=open(sys.argv[1])
file2=open(sys.argv[2])

data1 = []
data2 = []
evalDT = -1
if len(sys.argv) == 5:
	sys.argv[4]

# Read files
while file1:
	line = file1.readline()
	if not line:
		break
	fields = line.split()
	if len(fields) < 4 or fields[0][0] == '#':
		continue;
	data1.append([float(fields[0]), float(fields[1]), float(fields[2]), float(fields[3])])

while file2:
	line = file2.readline()
	if not line:
		break
	fields = line.split()
	if len(fields) < 4 or fields[0][0] == '#':
		continue;
	
	data2.append([float(fields[0]), float(fields[1]), float(fields[2]), float(fields[3])])

file1.close()
file2.close()

tf = initTf

# initial guess for transform
tf[0] = data2[0][0] - data1[0][0]
tf[1] = data2[1][0] - data1[1][0]
tf[2] = data2[2][0] - data1[2][0]
tf[3] = data2[3][0] - data1[3][0]

# Should optimize time first
lastErr = optimize(tf, 0, data1, data2, evalDT)

while True:
	order = [ 0, 1, 2, 3, 4 ]
	random.shuffle(order)
	
	for i in range(0, len(order)):
		idx = order[i]
		err = optimize(tf, idx, data1, data2, evalDT)
		print "Transform:", tf, "; error: ", err[0]
	
	dE = math.fabs(lastErr[0] - err[0])
	print "Error change:", dE
	if dE < minErrChange:
		break
	lastErr = err

transformed = []
transform(data2, transformed, tf)
err = calcDiffs(data1, transformed, True, evalDT)

print "Final error:", err, " (rmse, avg)"
print "Final transform:", tf

outFile=open(sys.argv[3], 'w')
for i in range(0, len(transformed)):
	outFile.write(str(transformed[i][0]) + '\t' + str(transformed[i][1]) + '\t' + str(transformed[i][2]) + '\t' +
		str(transformed[i][3]) + '\n')
outFile.close()
